import java.util.*;

class Main {
    // Function to add an undirected edge to the graph
    public static void addEdge(ArrayList<ArrayList<Integer>> adj, int u, int v) {
        adj.get(u).add(v);
        adj.get(v).add(u);
    }

    // BFS traversal of the graph starting from vertex `s`
    public static void BFStraversal(ArrayList<ArrayList<Integer>> adj, int v, int s) {
        Queue<Integer> q = new LinkedList<>();
        boolean[] visited = new boolean[v]; // Mark visited nodes
        visited[s] = true;
        q.add(s);

        while (!q.isEmpty()) {
            int u = q.poll();
            System.out.print(u + " ");

            // Visit all unvisited neighbors of the current node
            for (int neighbor : adj.get(u)) {
                if (!visited[neighbor]) {
                    visited[neighbor] = true;
                    q.add(neighbor);
                }
            }
        }
    }

    public static void main(String[] args) {
        int v = 5; // Number of vertices
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>(v);

        // Initialize adjacency list for each vertex
        for (int i = 0; i < v; i++) {
            adj.add(new ArrayList<Integer>());
        }

        // Add edges
        addEdge(adj, 0, 1);
        addEdge(adj, 0, 2);
        addEdge(adj, 1, 2);
        addEdge(adj, 1, 3);

        // Print adjacency list
        System.out.println("Adjacency List:");
        for (int i = 0; i < adj.size(); i++) {
            System.out.print("Vertex " + i + ": ");
            for (int j = 0; j < adj.get(i).size(); j++) {
                System.out.print(adj.get(i).get(j) + " ");
            }
            System.out.println();
        }

        // Perform BFS traversal
        System.out.println("\nBFS Traversal starting from vertex 0:");
        BFStraversal(adj, v, 0);
    }
}
