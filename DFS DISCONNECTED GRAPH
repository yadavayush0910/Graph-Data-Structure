import java.util.*;

class Main {
    // Function to add an undirected edge to the graph
    public static void addEdge(ArrayList<ArrayList<Integer>> adj, int u, int v) {
        adj.get(u).add(v);
        adj.get(v).add(u);
    }

    // DFS traversal of the graph starting from vertex `s`
    public static void DFStraversal(ArrayList<ArrayList<Integer>> adj, int s, boolean[] visited) {
        visited[s] = true;
        System.out.print(s + " ");
        
        // Visit all unvisited neighbors of the current node
        for (int neighbor : adj.get(s)) {
            if (!visited[neighbor]) {
                DFStraversal(adj, neighbor, visited);
            }
        }
    }

    public static void main(String[] args) {
        int v = 6; // Number of vertices
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>(v);

        // Initialize adjacency list for each vertex
        for (int i = 0; i < v; i++) {
            adj.add(new ArrayList<>());
        }

        // Add edges
        addEdge(adj, 0, 1);
        addEdge(adj, 0, 2);
        addEdge(adj, 1, 2);
        addEdge(adj, 3, 4); // Disconnected component
        addEdge(adj, 4, 5); // Disconnected component

        // Print adjacency list
        System.out.println("Adjacency List:");
        for (int i = 0; i < adj.size(); i++) {
            System.out.print("Vertex " + i + ": ");
            for (int j = 0; j < adj.get(i).size(); j++) {
                System.out.print(adj.get(i).get(j) + " ");
            }
            System.out.println();
        }

        // Perform DFS traversal for the entire graph
        System.out.println("\nDFS Traversal for the entire graph:");
        boolean[] visited = new boolean[v]; // Mark visited nodes
        
        for (int i = 0; i < v; i++) {
            if (!visited[i]) {
                System.out.println("Starting new DFS from vertex " + i + ":");
                DFStraversal(adj, i, visited);
                System.out.println();
            }
        }
    }
}
